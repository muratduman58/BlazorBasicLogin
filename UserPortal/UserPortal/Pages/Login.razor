@layout LoginLayout
@inject ILogin _login
@inject NavigationManager _Nav
@inject IJSRuntime _JSRuntime
@page "/"
@using UserPortal.Interfaces.Login
@using UserPortal.Models.Login


<MudContainer>
    <MudPaper Class="login-container">


        <MudGrid>
            <MudItem xs="12">
                <MudTextField T="string" Label="Kullanıcı Adı" Required="true" RequiredError="Kullanıcı adı zorunludur!" @bind-Value="@UserName"/>
                <MudTextField T="string" Label="Şifre" Required="true" RequiredError="Şifre zorunludur!" @bind-Value="@PassWord" InputType="InputType.Password" />
            </MudItem>

        </MudGrid>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@LoginClick" Class="login-button" Disabled="@isLoading">
            Giriş Yap @if (isLoading){<MudProgressCircular Color="Color.Info" Indeterminate="true" />}
           
        </MudButton>
    </MudPaper>
</MudContainer>

<style>
    .login-container {
        width: 500px;
        padding: 20px;
        margin: auto;
        margin-top: 100px;
    }

    .login-header {
        text-align: center;
        margin-bottom: 20px;
    }

    .login-input {
        margin-bottom: 15px;
    }

    .login-button {
        margin-top: 20px;
        width: 100%;
    }
</style>

@code {
    public string UserName = "demo607";
    public string PassWord = "1234567";
    public bool isLoading = false;
    public async Task LoginClick()
    {
        if (!String.IsNullOrEmpty(UserName) && !String.IsNullOrEmpty(PassWord))
        {
            isLoading = true;
            StateHasChanged();
            var res = await _login.UserLogin(UserName, PassWord, "");
            if (res.isOk)
            {
                _Nav.NavigateTo("/Home");
              
            }
            else
            {
                isLoading = false;
                StateHasChanged();
                LoginResponse lgnres = (LoginResponse)res.Model;
                await _JSRuntime.InvokeVoidAsync("SweetError", "Hata", lgnres.errorMsg);
            }
        }
        
    }
}
